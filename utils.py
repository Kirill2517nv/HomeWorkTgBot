from aiogram import Bot
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import logger, ADMIN_ID
from pathlib import Path
from typing import Optional, List, Tuple
import os

async def download_file(bot: Bot, file_id: str, dest_dir: Path, file_name: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–º—É."""
    file = await bot.get_file(file_id)
    os.makedirs(dest_dir, exist_ok=True)
    file_path = dest_dir / file_name
    await bot.download_file(file.file_path, file_path)
    logger.info(f"–°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {file_path}")
    return str(file_path)

async def download_photo(bot: Bot, photo_id: str, dest_dir: Path, suffix: str = "") -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏–∑ Telegram —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º."""
    file_name = f"photo_{photo_id}{suffix}.jpg"
    return await download_file(bot, photo_id, dest_dir, file_name)

async def download_document(bot: Bot, document_id: str, document_name: str, dest_dir: Path, suffix: str = "") -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Telegram —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º."""
    file_name = f"doc_{document_id}{suffix}_{document_name}"
    return await download_file(bot, document_id, dest_dir, file_name)

async def send_file_message(bot: Bot, chat_id: int, file_path: str, caption: Optional[str] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) —Å –ø–æ–¥–ø–∏—Å—å—é."""
    try:
        if file_path.lower().endswith((".png", ".jpg", ".jpeg", ".webp")):
            await bot.send_photo(chat_id=chat_id, photo=FSInputFile(file_path), caption=caption)
        else:
            await bot.send_document(chat_id=chat_id, document=FSInputFile(file_path), caption=caption)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {file_path} –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path} –≤ —á–∞—Ç {chat_id}: {e}")
        await bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")

async def send_message_with_buttons(bot: Bot, chat_id: int, text: str, buttons: List[Tuple[str, str]]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = InlineKeyboardBuilder()
    for button_text, callback_data in buttons:
        keyboard.button(text=button_text, callback_data=callback_data)
    keyboard.adjust(2)
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard.as_markup())
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —á–∞—Ç {chat_id}")

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id == ADMIN_ID

def format_answer_message(answer_text: Optional[str], answer_files: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞."""
    msg = "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω:\n"
    if answer_text:
        msg += f"üìù –¢–µ–∫—Å—Ç: {answer_text}\n"
    if answer_files:
        msg += f"üìé –§–∞–π–ª–æ–≤: {len(answer_files)}\n"
    return msg