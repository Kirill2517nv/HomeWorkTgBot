from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from typing import List, Tuple

def get_main_menu(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    builder = ReplyKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    builder.row(
        KeyboardButton(text="üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è"),
        KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
    )
    builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

    # –ö–Ω–æ–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if is_admin:
        builder.row(KeyboardButton(text="--- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---"))
        builder.row(
            KeyboardButton(text="‚ûï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"),
            KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        )
        builder.row(
            KeyboardButton(text="‚ûï –ù–æ–≤—ã–π —Ç–µ—Å—Ç"),
            KeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")
        )
        builder.row(
            KeyboardButton(text="üì• –û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è")
        )

    # –°–≤–æ–π—Å—Ç–≤–æ resize_keyboard=True –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
    return builder.as_markup(resize_keyboard=True)

def get_class_selection_keyboard(classes: List[int], prefix: str = "class_") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞."""
    builder = InlineKeyboardBuilder()
    for cls in classes:
        builder.button(text=str(cls), callback_data=f"{prefix}{cls}")
    builder.adjust(2)
    return builder.as_markup()

def get_task_selection_keyboard(tasks: List[Tuple[int, str]], prefix: str = "task_") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    for task_id, title in tasks:
        builder.button(text=title, callback_data=f"{prefix}{task_id}")
    builder.adjust(1)
    return builder.as_markup()

def get_unsent_tasks_keyboard(tasks: List[Tuple[int, str]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    builder = InlineKeyboardBuilder()
    for task_id, title in tasks:
        builder.button(text=title, callback_data=f"send_task_{task_id}")
    builder.adjust(1)
    return builder.as_markup()

def get_send_method_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_now")
    builder.button(text="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="send_schedule")
    builder.adjust(1)
    return builder.as_markup()