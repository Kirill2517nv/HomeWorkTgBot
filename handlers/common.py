from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import RegisterStates, ListStudentsStates
from db import Database
from utils import is_admin, send_message_with_buttons
from config import logger
from keyboards import get_main_menu

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, db: Database) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = message.from_user.id
    student = db.get_student(user_id)

    if not student:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(RegisterStates.first_name)
        return

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")
    admin_status = is_admin(user_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(admin_status))


@router.message(RegisterStates.first_name)
async def process_first_name(message: Message, state: FSMContext) -> None:
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegisterStates.last_name)


@router.message(RegisterStates.last_name)
async def process_last_name(message: Message, state: FSMContext) -> None:
    await state.update_data(last_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:")
    await state.set_state(RegisterStates.class_number)


@router.message(RegisterStates.class_number)
async def process_class_number(message: Message, state: FSMContext, db: Database) -> None:
    try:
        class_number = int(message.text)
        if class_number <= 0:
            raise ValueError("–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        data = await state.get_data()
        db.insert_student(
            first_name=data["first_name"],
            last_name=data["last_name"],
            class_number=class_number,
            telegram_id=message.from_user.id
        )

        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        admin_status = is_admin(message.from_user.id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(admin_status))
        await state.clear()
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (class_number): {e}, user_id: {message.from_user.id}")


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤")
async def list_students_from_button(message: Message, state: FSMContext, db: Database, bot: Bot) -> None:
    if not is_admin(message.from_user.id):
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é.")
        return

    classes = db.get_unique_classes()
    if not classes:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.")
        return

    buttons = [(str(cls), f"list_class_{cls}") for cls in classes]
    await send_message_with_buttons(bot, message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", buttons)
    await state.set_state(ListStudentsStates.class_number)


@router.callback_query(ListStudentsStates.class_number, F.data.startswith("list_class_"))
async def process_class_selection_for_list(callback: CallbackQuery, state: FSMContext, db: Database) -> None:
    class_number = int(callback.data.split("_")[2])
    students = db.get_student_names_by_class(class_number)

    if not students:
        await callback.message.answer(f"–í –∫–ª–∞—Å—Å–µ {class_number} –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        await state.clear()
        await callback.answer()
        return

    response = "\n".join([f"{i + 1}. {s[0]} {s[1]}" for i, s in enumerate(students)])
    await callback.message.answer(response)
    await state.clear()
    await callback.answer()

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu(is_admin(message.from_user.id))
        )
    else:
        await message.answer(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_main_menu(is_admin(message.from_user.id))
        )