from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import NewTaskStates, SendTaskStates, AnswerStates, ShowAnswersStates
from db import Database
from utils import is_admin, send_file_message, send_message_with_buttons, download_document, download_photo, \
    format_answer_message
from config import logger, HOMEWORKS_DIR, BOT_TOKEN, DB_NAME
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from keyboards import get_task_selection_keyboard, get_class_selection_keyboard, get_unsent_tasks_keyboard, get_send_method_keyboard
from typing import List
import os
import shutil

router = Router()


async def scheduled_task_job(task_id: int, class_number: int) -> None:
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º. –û–Ω–∞ —Å–∞–º–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ
    –æ–±—ä–µ–∫—Ç—ã Bot –∏ Database –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è {task_id} –∫–ª–∞—Å—Å—É {class_number}")
    bot = Bot(token=BOT_TOKEN)
    db = Database(db_path=DB_NAME)

    try:
        task = db.get_task(task_id)
        if not task:
            logger.error(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞—à–ª–∞ –∑–∞–¥–∞–Ω–∏–µ {task_id}")
            return

        _, title, description, file_path = task
        students = db.get_students_by_class(class_number)

        for student in students:
            try:
                msg = f"–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                if file_path:
                    await send_file_message(bot, student[0], file_path, caption=msg)
                else:
                    await bot.send_message(student[0], msg)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è {task_id} —Å—Ç—É–¥–µ–Ω—Ç—É {student[0]}: {e}")

        db.assign_task_to_class(task_id, class_number)
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ {task_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∞—Å—Å—É {class_number}")
    finally:
        # –í–∞–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é, —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        await bot.session.close()

async def send_scheduled_task(bot: Bot, task_id: int, class_number: int, db: Database) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
    task = db.get_task(task_id)
    if not task:
        logger.error(f"–ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        return

    id, title, description, file_path = task
    students = db.get_students_by_class(class_number)

    for student in students:
        try:
            msg = f"–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            if file_path:
                await send_file_message(bot, student[0], file_path, msg)
            else:
                await bot.send_message(chat_id=student[0], text=msg)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è {task_id} —Å—Ç—É–¥–µ–Ω—Ç—É {student[0]}: {e}")

    db.assign_task_to_class(task_id, class_number)
    logger.info(f"–ó–∞–¥–∞–Ω–∏–µ {task_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∞—Å—Å—É {class_number}")


@router.message(F.text == "‚ûï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def new_task(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(NewTaskStates.title)

@router.message(NewTaskStates.title)
async def process_task_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(NewTaskStates.description)

@router.message(NewTaskStates.description)
async def process_task_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∫ –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
    await state.set_state(NewTaskStates.file)


@router.message(NewTaskStates.file)
async def process_task_file(message: Message, state: FSMContext, bot: Bot, db: Database):
    file_path = None
    if message.document:
        file_path = await download_document(
            bot, message.document.file_id, message.document.file_name, HOMEWORKS_DIR
        )
    elif message.text and message.text.lower() != '–Ω–µ—Ç':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
        return

    data = await state.get_data()
    task_id = db.insert_task(
        title=data['title'],
        description=data['description'],
        file_path=file_path
    )
    await message.answer(f"–ó–∞–¥–∞–Ω–∏–µ '{data['title']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å ID {task_id}.")
    await state.clear()


@router.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def send_task_start(message: Message, state: FSMContext, db: Database):
    if not is_admin(message.from_user.id):
        return

    tasks = db.get_tasks_not_sent_to_all()
    if not tasks:
        await message.answer("–í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º, –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=get_unsent_tasks_keyboard(tasks)
    )
    await state.set_state(SendTaskStates.task_id)


@router.callback_query(SendTaskStates.task_id, F.data.startswith("send_task_"))
async def process_send_task_selection(callback: CallbackQuery, state: FSMContext, db: Database):
    task_id = int(callback.data.split("_")[2])
    await state.update_data(task_id=task_id)

    classes = db.get_classes_for_task(task_id)
    if not classes:
        await callback.message.edit_text("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª–∞—Å—Å–∞–º.")
        await state.clear()
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ:",
        reply_markup=get_class_selection_keyboard(classes, prefix="send_to_class_")
    )
    await state.set_state(SendTaskStates.class_number)
    await callback.answer()

@router.callback_query(SendTaskStates.task_id, F.data.startswith("task_"))
async def process_task_selection_for_send(callback: CallbackQuery, state: FSMContext) -> None:
    task_id = int(callback.data.split("_")[1])
    await state.update_data(task_id=task_id)
    buttons = [
        ("–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ", "immediate"),
        ("–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", "schedule")
    ]
    await send_message_with_buttons(callback.bot, callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:", buttons)
    await state.set_state(SendTaskStates.method)
    await callback.answer()


@router.callback_query(SendTaskStates.class_number, F.data.startswith("send_to_class_"))
async def process_send_class_selection(callback: CallbackQuery, state: FSMContext):
    class_number = int(callback.data.split("_")[3])
    await state.update_data(class_number=class_number)

    await callback.message.edit_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?",
        reply_markup=get_send_method_keyboard()
    )
    await state.set_state(SendTaskStates.method)
    await callback.answer()


@router.callback_query(SendTaskStates.method)
async def process_send_method(callback: CallbackQuery, state: FSMContext, bot: Bot, db: Database,
                              scheduler: AsyncIOScheduler):
    data = await state.get_data()
    task_id = data['task_id']
    class_number = data['class_number']

    if callback.data == "send_now":
        await send_scheduled_task(bot, task_id, class_number, db)
        await callback.message.edit_text(f"–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫–∞–º {class_number} –∫–ª–∞—Å—Å–∞.")
        await state.clear()
    elif callback.data == "send_schedule":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú'")
        await state.set_state(SendTaskStates.schedule_time)

    await callback.answer()


@router.message(SendTaskStates.schedule_time)
async def process_schedule_time(message: Message, state: FSMContext, scheduler: AsyncIOScheduler, bot: Bot,
                                db: Database):
    try:
        schedule_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        if schedule_time < datetime.now():
            await message.answer("–ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        data = await state.get_data()
        task_id = data['task_id']
        class_number = data['class_number']

        scheduler.add_job(
            scheduled_task_job,
            "date",
            run_date=schedule_time,
            args=[task_id, class_number]  # <--- –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã!
        )

        await message.answer(f"–ó–∞–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}.")
        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú'.")

@router.message(F.text == "üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
async def my_tasks(message: Message, state: FSMContext, db: Database):
    tasks = db.get_tasks_for_student_class(message.from_user.id)
    if not tasks:
        await message.answer("–î–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å:",
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        reply_markup=get_task_selection_keyboard(tasks, prefix="answer_task_")
    )
    await state.set_state(AnswerStates.task_id)


@router.callback_query(AnswerStates.task_id, F.data.startswith("answer_task_"))
async def process_task_selection_for_answer(callback: CallbackQuery, state: FSMContext) -> None:
    task_id = int(callback.data.split("_")[2])
    await state.update_data(current_task_id=task_id, answer_text="", answer_files=[])

    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å:\n"
        "1. –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "2. –§–∞–π–ª—ã (–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ)\n"
        "3. –ò —Ç–æ –∏ –¥—Ä—É–≥–æ–µ\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ'"
    )
    await state.set_state(AnswerStates.waiting_for_more_files)
    await callback.answer()


@router.message(AnswerStates.waiting_for_more_files, F.text)
async def handle_answer_text(message: Message, state: FSMContext, db: Database) -> None:
    if message.text.lower() == "–≤—Å–µ":
        await confirm_answer(message, state, db)
        return

    await state.update_data(answer_text=message.text)
    await message.answer(
        "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å '–≤—Å–µ', –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç."
    )


@router.message(AnswerStates.waiting_for_more_files, F.document | F.photo)
async def handle_answer_files(message: Message, state: FSMContext, bot: Bot) -> None:
    data = await state.get_data()
    files: List[str] = data.get("answer_files", [])
    user_id = message.from_user.id
    task_id = data["current_task_id"]

    if message.document:
        file_path = await download_document(bot, message.document.file_id, message.document.file_name, HOMEWORKS_DIR,
                                            f"_answer_{user_id}_{task_id}_{len(files)}")
    elif message.photo:
        file_path = await download_photo(bot, message.photo[-1].file_id, HOMEWORKS_DIR,
                                         f"_answer_{user_id}_{task_id}_{len(files)}")

    files.append(file_path)
    await state.update_data(answer_files=files)

    await message.answer(
        f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ', –µ—Å–ª–∏ —ç—Ç–æ –≤—Å—ë."
    )


async def confirm_answer(message: Message, state: FSMContext, db: Database) -> None:
    data = await state.get_data()
    user_id = message.from_user.id
    task_id = data["current_task_id"]
    answer_text = data.get("answer_text")
    answer_files = data.get("answer_files", [])

    if not answer_text and not answer_files:
        await message.answer("–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª.")
        return

    student = db.get_student(user_id)
    if not student:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        return

    student_id = student[0]
    if db.get_answers_by_task_and_student(student_id, task_id):
        await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.")
        await state.clear()
        return

    db.insert_answer(
        student_id=student_id,
        task_id=task_id,
        answer_text=answer_text,
        answer_file_path=";".join(answer_files) if answer_files else None
    )

    await message.answer(format_answer_message(answer_text, answer_files))
    await state.clear()


@router.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤")
async def show_answers_from_button(message: Message, state: FSMContext, db: Database):
    if not is_admin(message.from_user.id):
        return
    tasks = db.get_all_tasks()
    if not tasks:
        await message.answer("–ï—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã:",
        reply_markup=get_task_selection_keyboard(tasks, prefix="show_answers_")
    )
    await state.set_state(ShowAnswersStates.task_id)


@router.callback_query(ShowAnswersStates.task_id, F.data.startswith("show_answers_"))
async def process_task_selection_for_answers(callback: CallbackQuery, state: FSMContext, db: Database) -> None:
    task_id = int(callback.data.split("_")[2])
    answers = db.get_answers_by_task(task_id)
    if not answers:
        await callback.message.answer("–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.")
        await state.clear()
        await callback.answer()
        return

    task = db.get_task(task_id)
    task_title = task[1]
    output_dir = HOMEWORKS_DIR / task_title
    output_dir.mkdir(exist_ok=True)

    for answer in answers:
        answer_text, answer_file_path, first_name, last_name = answer
        student_dir = output_dir / f"{first_name}_{last_name}"
        student_dir.mkdir(exist_ok=True)

        if answer_text:
            with open(student_dir / "answer.txt", "w", encoding="utf-8") as f:
                f.write(answer_text)

        if answer_file_path:
            for i, file_path in enumerate(answer_file_path.split(";")):
                if os.path.exists(file_path):
                    ext = os.path.splitext(file_path)[1] or ".bin"
                    shutil.copy(file_path, student_dir / f"file_{i}{ext}")

    await callback.message.answer(f"–í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ {output_dir}")
    await state.clear()
    await callback.answer()

# –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–æ–≤ (–≤ –±—É–¥—É—â–µ–º): –î–æ–±–∞–≤—å—Ç–µ –≤ get_class_selection_keyboard –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å", state.update_data(selected_classes=state.data.get('selected_classes', []) + [cls])
# –í —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö callback –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ data == 'class_finish', –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.